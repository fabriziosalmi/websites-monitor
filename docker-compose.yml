# Website Monitor - Docker Compose Configuration

services:
  # Main Website Monitor API Service
  website-monitor-api:
    build: .
    container_name: website-monitor-api
    ports:
      - "8000:8000"
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./reports:/app/reports
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - PAGESPEED_API_KEY=${PAGESPEED_API_KEY:-}
    command: ["python", "api.py"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - website-monitor-network

  # Scheduled Monitor Service (runs checks periodically)
  website-monitor-scheduler:
    build: .
    container_name: website-monitor-scheduler
    volumes:
      - ./config.yaml:/app/config.yaml:ro
      - ./reports:/app/reports
      - ./logs:/app/logs
      - ./README.md:/app/README.md
      - ./report_template.md:/app/report_template.md:ro
    environment:
      - PYTHONUNBUFFERED=1
      - PAGESPEED_API_KEY=${PAGESPEED_API_KEY:-}
      - MONITOR_INTERVAL=${MONITOR_INTERVAL:-3600}  # Default: 1 hour
    command: ["python", "scheduler.py"]
    restart: unless-stopped
    depends_on:
      - website-monitor-api
    networks:
      - website-monitor-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: website-monitor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - website-monitor-api
    restart: unless-stopped
    profiles:
      - production

  # Optional: Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: website-monitor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    profiles:
      - production

  # Optional: PostgreSQL for storing monitoring results
  postgres:
    image: postgres:15-alpine
    container_name: website-monitor-db
    environment:
      POSTGRES_DB: website_monitor
      POSTGRES_USER: monitor_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_change_me}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:

networks:
  website-monitor-network:
    driver: bridge
